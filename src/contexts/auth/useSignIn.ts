
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/components/ui/use-toast';

export const useSignIn = (setError?: (error: string | null) => void) => {
  const [isLoading, setIsLoading] = useState(false);
  
  const signIn = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      const { error } = await supabase.auth.signInWithPassword({ email, password });
      
      if (error) {
        throw error;
      }
    } catch (error: any) {
      if (setError) {
        setError(error.message);
      }
      toast({
        title: "Sign in failed",
        description: error.message,
        variant: "destructive",
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };
  
  return {
    signIn,
    isLoading
  };
};

export const useSignInWithGoogle = (setError?: (error: string | null) => void) => {
  const [isLoading, setIsLoading] = useState(false);
  
  const signInWithGoogle = async () => {
    setIsLoading(true);
    try {
      // Get the current URL to determine environment
      const currentUrl = window.location.href;
      
      // Domain detection logic
      let baseUrl = '';
      if (currentUrl.includes('localhost') || currentUrl.includes('lovableproject.com')) {
        // Local/preview environment
        baseUrl = window.location.origin;
      } else {
        // Production environment - important: don't include www prefix
        baseUrl = 'https://roboquant.ai';
        
        // Log the domain we're redirecting to
        console.log("Using production domain for redirect:", baseUrl);
      }
      
      // Always use /auth as the redirect path
      const redirectTo = `${baseUrl}/auth`;
      
      // Log extensive debugging information
      console.log("=== GOOGLE AUTH INITIALIZATION ===");
      console.log("Initiating sign-in with redirect to:", redirectTo);
      console.log("Current environment:", baseUrl === window.location.origin ? "Development/Preview" : "Production");
      console.log("Current URL:", window.location.href);
      console.log("Current origin:", window.location.origin);
      console.log("Application base URL:", baseUrl);
      console.log("Full redirect URL to be used:", redirectTo);
      
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: redirectTo,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      });
      
      if (error) {
        console.error("=== GOOGLE AUTH ERROR ===");
        console.error("OAuth initialization error:", error);
        throw error;
      }
      
      if (data?.url) {
        console.log("=== GOOGLE AUTH REDIRECT ===");
        console.log("OAuth redirect URL generated:", data.url);
        // Force the browser to use this URL
        window.location.href = data.url;
      } else {
        console.error("=== GOOGLE AUTH ERROR ===");
        console.error("No redirect URL was generated by Supabase");
        throw new Error("Authentication provider did not return a redirect URL");
      }
    } catch (error: any) {
      console.error("=== GOOGLE AUTH EXCEPTION ===");
      console.error("Sign-in exception:", error);
      if (setError) {
        setError(error.message || "Failed to connect to Google authentication service");
      }
      toast({
        title: "Google sign in failed",
        description: error.message || "Failed to connect to Google authentication service",
        variant: "destructive",
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };
  
  return {
    signInWithGoogle,
    isLoading
  };
};
