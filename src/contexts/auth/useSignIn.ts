
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/components/ui/use-toast';

export const useSignIn = (setError?: (error: string | null) => void) => {
  const [isLoading, setIsLoading] = useState(false);
  
  const signIn = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      const { error } = await supabase.auth.signInWithPassword({ email, password });
      
      if (error) {
        throw error;
      }
    } catch (error: any) {
      if (setError) {
        setError(error.message);
      }
      toast({
        title: "Sign in failed",
        description: error.message,
        variant: "destructive",
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };
  
  return {
    signIn,
    isLoading
  };
};

export const useSignInWithGoogle = (setError?: (error: string | null) => void) => {
  const [isLoading, setIsLoading] = useState(false);
  
  const signInWithGoogle = async () => {
    setIsLoading(true);
    try {
      // Always use the actual domain the app is running on for redirects
      const currentDomain = window.location.hostname;
      const protocol = window.location.protocol;
      
      // Determine if we're in a development/preview environment
      const isDevelopment = 
        currentDomain.includes('localhost') || 
        currentDomain.includes('lovableproject.com') ||
        currentDomain.includes('lovable.app');
      
      // Base URL configuration
      let baseUrl = isDevelopment 
        ? window.location.origin 
        : `${protocol}//${currentDomain}`;
      
      // Explicitly add the www prefix for roboquant.ai domain if not already there
      if (currentDomain === 'roboquant.ai') {
        baseUrl = `${protocol}//www.${currentDomain}`;
      }
      
      // Always use /auth as the redirect path
      const redirectTo = `${baseUrl}/auth`;
      
      // Log extensive debugging information
      console.log("=== GOOGLE AUTH INITIALIZATION ===");
      console.log("Initiating sign-in with redirect to:", redirectTo);
      console.log("Current URL:", window.location.href);
      console.log("Current hostname:", currentDomain);
      console.log("Current origin:", window.location.origin);
      console.log("Is development:", isDevelopment);
      console.log("Full redirect URL to be used:", redirectTo);
      
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: redirectTo,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      });
      
      if (error) {
        console.error("=== GOOGLE AUTH ERROR ===");
        console.error("OAuth initialization error:", error);
        throw error;
      }
      
      if (data?.url) {
        console.log("=== GOOGLE AUTH REDIRECT ===");
        console.log("OAuth redirect URL generated:", data.url);
        // Force the browser to use this URL
        window.location.href = data.url;
      } else {
        console.error("=== GOOGLE AUTH ERROR ===");
        console.error("No redirect URL was generated by Supabase");
        throw new Error("Authentication provider did not return a redirect URL");
      }
    } catch (error: any) {
      console.error("=== GOOGLE AUTH EXCEPTION ===");
      console.error("Sign-in exception:", error);
      if (setError) {
        setError(error.message || "Failed to connect to Google authentication service");
      }
      toast({
        title: "Google sign in failed",
        description: error.message || "Failed to connect to Google authentication service",
        variant: "destructive",
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };
  
  return {
    signInWithGoogle,
    isLoading
  };
};
